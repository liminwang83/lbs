<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <property name="severity" value="warning"/>
    
    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>
    
    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength"/>
    
    <!--  Checks for whitespace                               --> 
    <!--  See http://checkstyle.sf.net/config_whitespace.html --> 
    <!-- Checks that there are no tab characters ('\t') in the source code. 
         Rationale: 
         Developers should not need to configure the tab width of their text editors 
         in order to be able to read source code. 
         From the Apache jakarta coding standards: In a distributed development environment, 
         when the commit messages get sent to a mailing list, 
         they are almost impossible to read if you use tabs.  -->
    <module name="FileTabCharacter" /> 
    
    <!--  Miscellaneous other checks.                   --> 
    <!--  See http://checkstyle.sf.net/config_misc.html --> 
    <module name="RegexpSingleline">
    <property name="format" value="\s+$" /> 
    <property name="minimum" value="0" /> 
    <property name="maximum" value="0" /> 
    <property name="message" value="Line has trailing spaces." /> 
    </module>


    <module name="TreeWalker">

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!-- Javadoc is not required on a method that is tagged with the @Override annotation. -->
        <module name="JavadocMethod">
          <property name="scope" value="public"/>
        </module>
        <module name="JavadocType"/>
        <module name="JavadocVariable">
          <property name="scope" value="public"/>
        </module>
        <!-- Validates Javadoc comments to help ensure they are well formed.
        e.g. Ensures the first sentence ends with proper punctuation 
        (That is a period, question mark, or exclamation mark, by default). 
        Check text for Javadoc statements that do not have any description. 
        This includes both completely empty Javadoc, and Javadoc with only tags such as @param and @return.-->
        <module name="JavadocStyle">
          <property name="scope" value="public"/>
        </module>


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <!-- ConstantName constants (static, final fields)  ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$ -->
        <module name="ConstantName"/>
        <!-- local, final variables, including catch parameters ^[a-z][a-zA-Z0-9]*$ -->
        <module name="LocalFinalVariableName"/>
        <!-- local, non-final variables, including catch parameters  ^[a-z][a-zA-Z0-9]*$ -->
        <module name="LocalVariableName"/>
        <!-- MemberName non-static fields ^[a-z][a-zA-Z0-9]*$ -->
        <module name="MemberName"/>
        <!-- MethodName methods ^[a-z][a-zA-Z0-9]*$ -->
        <module name="MethodName"/>
        <!-- PackageName packages ^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$ -->
        <module name="PackageName"/>
        <!-- ParameterName parameters ^[a-z][a-zA-Z0-9]*$ -->
        <module name="ParameterName"/>
        <!-- StaticVariableName static, non-final fields  ^[a-z][a-zA-Z0-9]*$ -->
        <module name="StaticVariableName"/>
        <!-- TypeName classes and interfaces ^[A-Z][a-zA-Z0-9]*$ -->
        <module name="TypeName"/>


        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
            <!-- The follow property value demonstrates the ability     -->
            <!-- to have access to ANT properties. In this case it uses -->
            <!-- the ${basedir} property to allow Checkstyle to be run  -->
            <!-- from any directory within a project. See property      -->
            <!-- expansion,                                             -->
            <!-- http://checkstyle.sf.net/config.html#properties        -->
            <!-- <property                                              -->
            <!--     name="headerFile"                                  -->
            <!--     value="${basedir}/java.header"/>                   -->
        <!-- </module> -->

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!-- Checks for annotations                                        -->
        <!-- See http://checkstyle.sourceforge.net/config_annotation.html -->
        <module name="MissingDeprecated"/>
        <module name="MissingOverride"/>

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="LineLength">
    	  <property name="max" value="80"/>
        </module>
        <module name="MethodLength">
          <property name="max" value="150"/>
        </module>
        <module name="ParameterNumber">
          <property name="max" value="7"/>
          <property name="tokens" value="METHOD_DEF"/>
        </module>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad"/> 
        <module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap"/>        
        <module name="ParenPad">
          <property name="option" value="space"/>
        </module>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround">
          <property name="tokens" value="ASSIGN"/>
        </module>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <!-- Checks that the order of modifiers conforms to the suggestions in the 
        Java Language specification, sections 8.1.1, 8.3.1 and 8.4.3. 
        The correct order is: 
          1.public 
          2.protected 
          3.private 
          4.abstract 
          5.static 
          6.final 
          7.transient 
          8.volatile 
          9.synchronized 
          10.native 
          11.strictfp 
         -->
        <module name="ModifierOrder"/>
        <!-- Checks for redundant modifiers in interface and annotation definitions. 
        Also checks for redundant final modifiers on methods of final classes. 
        Rationale: The Java Language Specification strongly discourages the usage of 
        "public" and "abstract" for method declarations in interface definitions as a matter of style. 
        Variables in interfaces and annotations are automatically public, static and final, 
        so these modifiers are redundant as well. 
        As annotations are a form of interface, their fields are also automatically 
        public, static and final just as their annotation fields are automatically public and abstract. 
        Final classes by definition can not be extended 
        so the final modifier on the method of a final class is redundant. 
         -->
        <module name="RedundantModifier"/>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <!-- Rationale: Nested blocks are often leftovers from the debugging process, they confuse the reader. 
             For example this Check finds the obsolete braces in 
              public void guessTheOutput()
              {
                  int whichIsWich = 0;
                  {
                      int whichIsWhich = 2;
                  }
                  System.out.println("value = " + whichIsWhich);
              }
         -->
        <module name="AvoidNestedBlocks">
          <property name="allowInSwitchCase" value="true"/>
        </module>
        <module name="EmptyBlock"/>
        <module name="LeftCurly">
          <property name="option" value="nl"/>
        </module>
        <module name="NeedBraces"/>
        <module name="RightCurly">
          <property name="option" value="alone"/>
        </module>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!-- Detects inline conditionals. An example inline conditional is this: 
              String a = getParameter("a");
              String b = (a==null || a.length<1) ? null : a.substring(1);
             Rationale: Some developers find inline conditionals hard to read, 
             so their company's coding standards forbids them.  -->
        <module name="AvoidInlineConditionals"/>
        <!-- The "double-checked locking" idiom (DCL) tries to avoid the runtime cost of synchronization. 
             An example that uses the DCL idiom is this: 
            public class MySingleton
            {
                private static theInstance = null;
            
                private MySingleton() {}
            
                public MySingleton getInstance() {
                    if ( theInstance == null ) { // synchronize only if necessary
                        synchronized( MySingleton.class ) {
                            if ( theInstance == null ) {
                                theInstance = new MySingleton();
                            }
                        }
                    }
                }
            } -->
        <module name="DoubleCheckedLocking"/>    <!-- MY FAVOURITE -->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <!-- Checks that a local variable or a parameter 
        does not shadow a field that is defined in the same class. -->
        <module name="HiddenField"/>
        <!-- Checks for illegal instantiations where a factory method is preferred.               
             Rationale: Depending on the project, for some classes it might be preferable to 
             create instances through factory methods rather than calling the constructor. 
              
             A simple example is the java.lang.Boolean class. 
             In order to save memory and CPU cycles, it is preferable to use 
             the predefined constants TRUE and FALSE. 
             Constructor invocations should be replaced by calls to Boolean.valueOf(). 
              
             Some extremely performance sensitive projects may require the use of factory methods 
             for other classes as well, to enforce the usage of number caches or object pools.  -->
        <module name="IllegalInstantiation"/>
        <!-- Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);. 
             Rationale: With the exception of for iterators, 
             all assignments should occur in their own toplevel statement to increase readability. 
             With inner assignments like the above it is difficult to see all places where a variable is set.-->
        <module name="InnerAssignment"/>
        <module name="MagicNumber"/>
        <module name="MissingSwitchDefault"/>
        <!-- Checks for redundant exceptions declared in throws clause such as duplicates, 
        unchecked exceptions or subclasses of another declared exception. -->
        <module name="RedundantThrows"/>
        <!-- Checks for overly complicated boolean expressions. Currently finds code like 
             if (b == true), b || true, !false, etc. 
             Rationale: Complex boolean logic makes code hard to understand and maintain.  -->
        <module name="SimplifyBooleanExpression"/>
        <!-- Checks for overly complicated boolean return statements. For example the following code 
            if (valid())
                return false;
            else
                return true;
                
            could be written as             
                return !valid(); -->
        <module name="SimplifyBooleanReturn"/>
        <!-- Checks that string literals are not used with == or !=. 
             Rationale: Novice Java programmers often use code like: 
              if (x == "something")
                      when they mean             
              if ("something".equals(x)) -->
        <module name="StringLiteralEquality"/>
        <!-- Checks that any combination of String literals with optional assignment 
             is on the left side of an equals() comparison.
             For example: 
                String nullString = null;
                nullString.equals("My_Sweet_String");
             should be refactored to:
                String nullString = null;
                "My_Sweet_String".equals(nullString); -->
        <module name="EqualsAvoidNull"/>
        <module name="NestedForDepth">
           <property name="max" value="1"/>
        </module>
        <module name="NestedIfDepth">
           <property name="max" value="1"/>
        </module>
        <module name="NestedTryDepth">
           <property name="max" value="1"/>
        </module>
        <!-- Catching java.lang.Exception, java.lang.Error or java.lang.RuntimeException 
             is almost never acceptable. 
             Rationale: Junior developers often simply catch Exception 
             in an attempt to handle multiple exception classes. 
             This unfortunately leads to code that inadvertantly catchs NPE, OutOfMemoryErrors, etc. 
         -->
        <module name="IllegalCatch"/>
        <!-- This check can be used to ensure that types are not declared to be thrown. 
        Declaring to throw java.lang.Error or java.lang.RuntimeException is almost never acceptable.  -->
        <module name="IllegalThrows"/>
        

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!-- Checks that classes are designed for extension. 
             More specifically, it enforces a programming style where superclasses 
             provide empty "hooks" that can be implemented by subclasses. 
             The exact rule is that nonprivate, nonstatic methods of classes that 
             can be subclassed must either be             
                abstract or 
                final or 
                have an empty implementation 
            Rationale: This API design style protects superclasses against beeing broken by subclasses. 
            The downside is that subclasses are limited in their flexibility, 
            in particular they cannot prevent execution of code in the superclass, 
            but that also means that subclasses cannot corrupt the state of the superclass 
            by forgetting to call the super method.  -->
        <!-- *******Consider not use this? -->
        <module name="DesignForExtension"/>
        <!-- Checks that a class which has only private constructors is declared as final. -->
        <module name="FinalClass"/>
        <!-- Make sure that utility classes (classes that contain only static methods or fields in their API) 
             do not have a public constructor. 
             Rationale: Instantiating utility classes does not make sense. 
             Hence the constructors should either be private or (if you want to allow subclassing) protected. A common mistake is forgetting to hide the default constructor.
         -->
        <module name="HideUtilityClassConstructor"/>
        <!-- Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types. 
             According to Bloch, an interface should describe a type. 
             It is therefore inappropriate to define an interface that does not contain any methods 
             but only constants. The Standard class javax.swing.
             SwingConstants is an example of a class that would be flagged by this check. -->
        <module name="InterfaceIsType"/>
        <!-- Checks visibility of class members. 
            Only static final members may be public; 
            other class members must be private unless property protectedAllowed or packageAllowed is set. -->
        <module name="VisibilityModifier"/>
        <!-- Check nested (internal) classes/interfaces are declared at the bottom of the class 
        after all method and field declarations. -->
        <module name="InnerTypeLast"/>

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <!-- Consider use this? -->
        <module name="FinalParameters"/>
        <!-- A check for TODO: comments. Actually it is a generic regular expression matcher on Java comments. 
        To check for other patterns in Java comments, set property format.
        Using TODO: comments is a great way to keep track of tasks that need to be done. 
        Having them reported by Checkstyle makes it very hard to forget about them. -->
        <module name="TodoComment"/>
        <module name="UpperEll"/>
        <module name="TrailingComment"/>

    </module>

</module>
